package com.spacebottle.controllers;import java.util.Date;import java.util.Timer;import java.util.TimerTask;import com.example.spacebottle.R;import com.microsoft.windowsazure.notifications.NotificationsManager;import com.spacebottle.helper.SBAuthenticateCallback;import com.spacebottle.models.Ticket;import com.spacebottle.models.Tickets;import android.app.Activity;import android.os.Bundle;import android.os.Handler;import android.util.Log;import android.view.Window;import android.widget.Button;import android.widget.ProgressBar;import android.widget.TextView;public class PostActivity extends SBActivity {		private Tickets mTickets;	Date limit;	Timer timer = null;	Handler handle = new Handler();		private TextView messageTextView;	private Button postButton;	private TextView limitClock;	public PostActivity() {		// TODO Auto-generated constructor stub	}		@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.activity_post);		requestWindowFeature(Window.FEATURE_NO_TITLE);				self = this;		setProgressBar((ProgressBar) findViewById(R.id.loadingProgressBar));		hideProgressBar();		NotificationsManager.handleNotifications(this, getString(R.string.sender_id), PushHandler.class);		connect(new SBAuthenticateCallback(){			@Override			public void success() {				hideProgressBar();				initialize();			}			@Override			public void error(Exception exception) {				// TODO Auto-generated method stub			}});			}		private void initialize() {		messageTextView = (TextView) findViewById(R.id.message_text_view);		postButton = (Button) findViewById(R.id.post_button);		limitClock = (TextView) findViewById(R.id.limit_clock);				mTickets = new Tickets(mClient);		//リミットのDate が欲しい。		//mTickets.					}		private void initializeLimitClock() {		if (timer == null) {			limitClock.setText("10:00");			timer = new Timer();			timer.schedule(new MyTimer(), 1000); // ミリ秒でセット		}	}		class MyTimer extends TimerTask {		@Override		public void run() {			handle.post(new Runnable() {				@Override				public void run() {					Date now = new Date();					if (limit.compareTo(now) >= 0) {						long leftMillisecond = limit.getTime() - now.getTime();						int leftSecond = (int) (leftMillisecond / 1000);						int leftMinutes = leftSecond / 60;						leftSecond = leftSecond - 60 * leftMinutes;						limitClock.setText(leftMinutes + ":" + leftSecond);					} else {						Log.v("MyTimer", "チケットの有効期限切れ");					}									}			});		}	}}